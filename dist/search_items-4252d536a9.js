searchNodes=[{"doc":"Documentation for CrunchBerry .","ref":"CrunchBerry.html","title":"CrunchBerry","type":"module"},{"doc":"Hello world. Examples iex&gt; CrunchBerry . hello ( ) :world","ref":"CrunchBerry.html#hello/0","title":"CrunchBerry.hello/0","type":"function"},{"doc":"Helpers for LiveViews.","ref":"CrunchBerry.Components.LiveHelpers.html","title":"CrunchBerry.Components.LiveHelpers","type":"module"},{"doc":"Renders a component inside the CrunchBerry.Components.Modal component. Options id - required. The modal is a Phoenix.LiveComponent , and needs a specified id . return_to - required. This is the route that will be pushed to when the modal is closed, either by the &quot;x&quot; or clicking the background. Examples &lt; % = live_modal MyProjectWeb.WidgetLive.FormComponent , id : :new , return_to : Routes . widget_index_path ( @socket , :index ) # Any option besides id/return_to is passed through to the child component, # this is where you can pass in any assigns the child component is going to need. action : @live_action % &gt;","ref":"CrunchBerry.Components.LiveHelpers.html#live_modal/2","title":"CrunchBerry.Components.LiveHelpers.live_modal/2","type":"function"},{"doc":"Renders CrunchBerry.Components.Pagination . ## Options page - required. A Scrivener.Page compatible data structure. name - required. Use for aria-labels classes - overrides to customize the look and feel. See classes below. ## Classes In order to customize the look and feel, you may pass in a map. The following keys are supported: active - Classes applied to the currently active page. text - Classes applied to all children, except the currently active page. ## Pagination The containing LiveView/Component must implement the handle_event/3 callback . The callback is executed with a param of %{&quot;page&quot; =&gt; page} representing the user's selected page. Example: def handle_event ( &quot;page&quot; , %{ &quot;page&quot; =&gt; page } , socket ) do { :noreply , push_redirect ( socket , to : Routes . root_path ( socket , :index , active_page : page ) ) } end ## Examples &lt; % = live_pagination name : &quot;My Cool Pagination&quot; , page : @page , classes : %{ active : &quot;bg-blue hover:bg-blue-900 text-white&quot; , text : &quot;bg-white text-blue hover:bg-gray-100&quot; } % &gt;","ref":"CrunchBerry.Components.LiveHelpers.html#live_pagination/1","title":"CrunchBerry.Components.LiveHelpers.live_pagination/1","type":"function"},{"doc":"Renders CrunchBerry.Components.TypeAhead . Options form - required - the containing Phoenix.HTML.Form. label - required - a form label for display purposes search_text - required - this value will be used as the value for the input search_results - required - a list of results from you typeahead search function the require type is [{integer(), String.t()}] current_focus - required - a integer pointing to the index of the focused search_result, it shoud default to -1 placeholder - optional - You can optionally pass in placeholder text otherwise it defaults to &quot;Searching...&quot; Examples &lt;%= live_type_ahead(form: f, label: &quot;User Search&quot;, search_text: @search_text, search_results: @search_results, current_focus : @current_focus , placeholder : &quot;name or e-mail address...&quot; ) % &gt; Internal Events type-ahead-blur - optional - This phx-blur event can be used to clear te drop-down by setting search_results to [] type-ahead-set-focus - optional - This phx-window-keydown event should haandle %{&quot;key&quot; =&gt; &quot;ArrowUp&quot;} and %{&quot;key&quot; =&gt; &quot;ArrowDown&quot;} to iceme a decrement current_focus . type-ahead-select - optional - This phx-click handles clickig search_results in the drop-down it passes %{&quot;type-ahead-result&quot; =&gt; result_text, &quot;type-ahead-result-id&quot; =&gt; result_id, &quot;value&quot; =&gt; index_value} Other events The form that cotains the live_type_ahead/1 call needs to imlment the following - phx_change to search for the text - phx_submit this will depend on the purpose of the form Handling Events The following are example event handlers you MIGHT implement. The list is not exhaustive, but should be helpful in getting started. Examples def mount(_params, _session, socket) do assigns = [ search_text : &quot;&quot; , search_results : [ ] , current_focus : - 1 ] { :ok , assign ( socket , assigns ) } end def handle event(&quot;type-ahead-blur&quot;, , socket) do assigns = [ search_results : [ ] , current_focus : - 1 ] { :noreply , assign ( socket , assigns ) } end # this is an example of a phx_change handler called &quot;type-ahead-search&quot; def handle_event(&quot;type-ahead-search&quot;, %{&quot;type_ahead_search&quot; =&gt; search}, socket) do results = YourContext . search_functon ( search ) assigns = [ search_text : search , search_results : results ] { :noreply , assign ( socket ( assigns ) ) } end # &quot;ArrowDown&quot; is the is the inverse def handle_event(&quot;type-ahead-set-focus&quot;, %{&quot;key&quot; =&gt; &quot;ArrowUp&quot;}, socket) do current_focus = Enum . max ( [ socket . assigns . current_focus - 1 , 0 ] ) { :noreply , assign ( socket , current_focus : current_focus ) } end # on &quot;Enter&quot; this handler passes values to the submit event for the id # if a particular element is choosen, otherwise the search text def handle_event(&quot;type-ahead-set-focus&quot;, %{&quot;key&quot; =&gt; &quot;Enter&quot;}, socket) do case Enum . at ( socket . assigns . search_results , socket . assigns . current_focus ) do { id , _ } -&gt; handle_event ( &quot;YOUR-SUBMIT-EVENT&quot; , %{ &quot;id&quot; =&gt; id } , socket ) _ -&gt; handle_event ( &quot;YOUR-SUBMIT-EVENT&quot; , %{ &quot;type_ahead_search&quot; =&gt; socket . assigns . search } , socket ) end end def handle_event( &quot;type-ahead-select&quot; , %{ &quot;type-ahead-result&quot; =&gt; _ , &quot;type-ahead-result-id&quot; =&gt; id , &quot;value&quot; =&gt; _ } , socket ) do { :noreply , push_patch ( socket , to : Routes . some_path ( socket , :SOME_ACTION , %{ &quot;id&quot; =&gt; id } ) , replace : true ) } end def handle_event(&quot;YOUR-SUBMIT-EVENT&quot;, %{&quot;id&quot; =&gt; id}, socket) do { :noreply , push_patch ( socket , to : Routes . some_path ( socket , :SOME_ACTION , %{ &quot;id&quot; =&gt; id } ) , replace : true ) } end def handle_event(&quot;YOUR-SUBMIT-EVENT&quot;, %{&quot;type_ahead_search&quot; =&gt; search}, socket) do params = if socket . assigns . current_focus == - 1 do %{ &quot;type_ahead_search&quot; =&gt; search } else socket . assigns . params end { :noreply , socket |&gt; assign ( :current_focus , - 1 ) |&gt; push_patch ( to : Routes . some_path ( socket , :SOME_ACTION , params ) , replace : true ) } end","ref":"CrunchBerry.Components.LiveHelpers.html#live_type_ahead/1","title":"CrunchBerry.Components.LiveHelpers.live_type_ahead/1","type":"function"},{"doc":"Reusable modal component, for use with TailwindCSS","ref":"CrunchBerry.Components.Modal.html","title":"CrunchBerry.Components.Modal","type":"module"},{"doc":"Pagination component for Live View. This component is designed to work with Scrivener result pages, using Tailwind classes.","ref":"CrunchBerry.Components.Pagination.html","title":"CrunchBerry.Components.Pagination","type":"module"},{"doc":"Reusable modal component, for use with TailwindCSS","ref":"CrunchBerry.Components.TypeAhead.html","title":"CrunchBerry.Components.TypeAhead","type":"module"},{"doc":"The render function requires the form Struct, a search string, and search_results. The placeholder key is optional and defautls to &quot;Search...&quot;.","ref":"CrunchBerry.Components.TypeAhead.html#render/1","title":"CrunchBerry.Components.TypeAhead.render/1","type":"function"},{"doc":"","ref":"CrunchBerry.Components.TypeAhead.html#t:args/0","title":"CrunchBerry.Components.TypeAhead.args/0","type":"type"},{"doc":"CrunchBerry TODO: Add description","ref":"readme.html","title":"CrunchBerry","type":"extras"},{"doc":"If available in Hex , the package can be installed by adding crunch_berry to your list of dependencies in mix.exs : def deps do [ { :crunch_berry , &quot;~&gt; 0.1.0&quot; } ] end Documentation can be generated with ExDoc and published on HexDocs . Once published, the docs can be found at https://hexdocs.pm/crunch_berry .","ref":"readme.html#installation","title":"CrunchBerry - Installation","type":"extras"}]